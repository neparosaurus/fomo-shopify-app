const dewoidToast = function() {
    const toastContainer = document.createElement('div');
    toastContainer.className = 'toast-container';

    const toastContent = document.createElement('div');
    toastContent.className = 'toast-content';

    const toastMessage = document.createElement('div');
    toastMessage.className = 'toast-message';

    toastContent.appendChild(toastMessage);
    toastContainer.appendChild(toastContent);
    document.body.appendChild(toastContainer);

    const style = document.createElement('style');

    style.innerHTML = `
    .toast-container {
      {% if fontFamily != 'default' %}font-family: "{{ fontFamily }}";{% endif %}
      position: fixed;
      {% if 'top' in position %}top{% else %}bottom{% endif %}: 20px;
      {% if 'left' in position %}left{% else %}right{% endif %}: 0;
      z-index: 999;
      background-color: {{ backgroundColor|raw }};
      padding: 10px;
    {% if cornerStyle == 'rounded' %}
      border-radius: 5px;
    {% endif %}
      box-shadow: 0 0 10px rgba(0,0,0,0.1);
      opacity: 0;
      visibility: hidden;
      max-width: calc(100% - 60px);
      transition: opacity 0.5s, visibility 0.5s, {% if 'left' in position %}left{% else %}right{% endif %} 0.5s;
    }}

    .toast-content {
      display: flex;
      align-items: center;
    }

    .toast-message {
      margin: 0;
      font-size: 14px;
      color: rgba(255,255,255,0.7);
    }

    .toast-message span,
    .toast-message a {
      font-weight: bold;
      color: {{ textColor|raw }};
    }

    .toast-container.toast-show {
      visibility: visible;
      opacity: 1;
      {% if 'left' in position %}left{% else %}right{% endif %}: 20px;
    }

    .toast-container.toast-hide {
      visibility: hidden;
      opacity: 0;
    }
  `;
    document.head.appendChild(style);

    const orders = {{ orders|raw }};
    let currentOrder = 0;

    const scriptLoadDelay = performance.now();
    const initialDelay = {{ initialDelay * 1000 }};
    const totalInitialDelay = initialDelay < scriptLoadDelay ? 0 : scriptLoadDelay - initialDelay;
    const delay = {{ delay * 1000 }};
    const displayDuration = {{ duration * 1000 }};
    const loop = {{ loopOrders }};
    const shuffle = {{ shuffleOrders }};
    const hideTime = {{ hideTimeInOrders }};

    if (orders.length === 0) {
        return;
    }

    function showToast() {
        if (shuffle) {
            currentOrder = orders[getRandomInt(0, orders.length - 1)];
        } else if (currentOrder >= orders.length) {
            currentOrder = 0;

            if (!loop) {
                return;
            }
        }

        const { customerName, location, productTitle, productHandle, createdAtAgo } = orders[currentOrder];
        toastMessage.innerHTML = `<span>${customerName}</span>`;

        if (location) {
            toastMessage.innerHTML += ` from <span>${location}</span>`;
        }

        hideTime ? toastMessage.innerHTML += ` just bought` : toastMessage.innerHTML += ` ${createdAtAgo}`;

        toastMessage.innerHTML += ` <a href="/products/${productHandle}" target="_blank">${productTitle}</a>!`;
        toastContainer.classList.add('toast-show');
        setTimeout(hideToast, displayDuration);
        currentOrder++;
    }

    function hideToast() {
        toastContainer.classList.remove('toast-show');
        setTimeout(showToast, delay);
    }

    function getRandomInt(min, max) {
        const minCeiled = Math.ceil(min);
        const maxFloored = Math.floor(max);
        return Math.floor(Math.random() * (maxFloored - minCeiled) + minCeiled); // The maximum is exclusive and the minimum is inclusive
    }


    setTimeout(showToast, totalInitialDelay);
};

dewoidToast();